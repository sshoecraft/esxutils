        char *changeVersion;    /* optional element of type xsd:string */
        char *name;     /* optional element of type xsd:string */
        char *version;  /* optional element of type xsd:string */
        char *uuid;     /* optional element of type xsd:string */
        char *instanceUuid;     /* optional element of type xsd:string */
        int __sizenpivNodeWorldWideName;        /* sequence of elements <npivNodeWorldWideName> */
        LONG64 *npivNodeWorldWideName;  /* optional element of type xsd:long */
        int __sizenpivPortWorldWideName;        /* sequence of elements <npivPortWorldWideName> */
        LONG64 *npivPortWorldWideName;  /* optional element of type xsd:long */
        char *npivWorldWideNameType;    /* optional element of type xsd:string */
        short *npivDesiredNodeWwns;     /* optional element of type xsd:short */
        short *npivDesiredPortWwns;     /* optional element of type xsd:short */
        enum xsd__boolean *npivTemporaryDisabled;       /* optional element of type xsd:boolean */
        enum xsd__boolean *npivOnNonRdmDisks;   /* optional element of type xsd:boolean */
        char *npivWorldWideNameOp;      /* optional element of type xsd:string */
        char *locationId;       /* optional element of type xsd:string */
        char *guestId;  /* optional element of type xsd:string */
        char *alternateGuestName;       /* optional element of type xsd:string */
        char *annotation;       /* optional element of type xsd:string */
        struct ns1__VirtualMachineFileInfo *files;      /* optional element of type ns1:VirtualMachineFileInfo */
        struct ns1__ToolsConfigInfo *tools;     /* optional element of type ns1:ToolsConfigInfo */
        struct ns1__VirtualMachineFlagInfo *flags;      /* optional element of type ns1:VirtualMachineFlagInfo */
        struct ns1__VirtualMachineConsolePreferences *consolePreferences;       /* optional element of type ns1:VirtualMachineConsolePreferences */
        struct ns1__VirtualMachineDefaultPowerOpInfo *powerOpInfo;      /* optional element of type ns1:VirtualMachineDefaultPowerOpInfo */
        int *numCPUs;   /* optional element of type xsd:int */
        LONG64 *memoryMB;       /* optional element of type xsd:long */
        enum xsd__boolean *memoryHotAddEnabled; /* optional element of type xsd:boolean */
        enum xsd__boolean *cpuHotAddEnabled;    /* optional element of type xsd:boolean */
        enum xsd__boolean *cpuHotRemoveEnabled; /* optional element of type xsd:boolean */
        int __sizedeviceChange; /* sequence of elements <deviceChange> */
        struct ns1__VirtualDeviceConfigSpec *deviceChange;      /* optional element of type ns1:VirtualDeviceConfigSpec */
        struct ns1__ResourceAllocationInfo *cpuAllocation;      /* optional element of type ns1:ResourceAllocationInfo */
        struct ns1__ResourceAllocationInfo *memoryAllocation;   /* optional element of type ns1:ResourceAllocationInfo */
        struct ns1__VirtualMachineAffinityInfo *cpuAffinity;    /* optional element of type ns1:VirtualMachineAffinityInfo */
        struct ns1__VirtualMachineAffinityInfo *memoryAffinity; /* optional element of type ns1:VirtualMachineAffinityInfo */
        struct ns1__VirtualMachineNetworkShaperInfo *networkShaper;     /* optional element of type ns1:VirtualMachineNetworkShaperInfo */
        int __sizecpuFeatureMask;       /* sequence of elements <cpuFeatureMask> */
        struct ns1__VirtualMachineCpuIdInfoSpec *cpuFeatureMask;        /* optional element of type ns1:VirtualMachineCpuIdInfoSpec */
        int __sizeextraConfig;  /* sequence of elements <extraConfig> */
        struct ns1__OptionValue *extraConfig;   /* optional element of type ns1:OptionValue */
        char *swapPlacement;    /* optional element of type xsd:string */
        struct ns1__VirtualMachineBootOptions *bootOptions;     /* optional element of type ns1:VirtualMachineBootOptions */
        struct ns1__VmConfigSpec *vAppConfig;   /* optional element of type ns1:VmConfigSpec */
        struct ns1__FaultToleranceConfigInfo *ftInfo;   /* optional element of type ns1:FaultToleranceConfigInfo */
        enum xsd__boolean *vAppConfigRemoved;   /* optional element of type xsd:boolean */
        enum xsd__boolean *vAssertsEnabled;     /* optional element of type xsd:boolean */
        enum xsd__boolean *changeTrackingEnabled;       /* optional element of type xsd:boolean */

#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

my $debug = 0;
sub dprintf { my $level = shift; printf(@_) if ($debug >= $level); }

my $VMDB_SERVER = "tools.uprd.usoncology.unx";
my $SYSDB_SERVER = "tools.uprd.usoncology.unx";

my $have_cmdb = 1;

my $help = 0;
my $do_all = 0;
my $do_vms = 0;
my $do_ds = 0;
my $do_net = 0;
my $no_head = 0;
my $do_list = 0;
my $do_model = 0;
my $do_serial = 0;
my $do_cpu = 0;
my $do_exact = 0;
my $do_serv = 0;
my $x_opt = 0;
my $c_opt = 0;
GetOptions('help|?' => \$help, 'all' => \$do_all, 'vms' => \$do_vms, 'datastores' => \$do_ds, 'subnets' => \$do_net, 'nohead' => \$no_head, 'list' => \$do_list, 'xopt' => \$x_opt, 'model' =>  \$do_model, 'comma' => \$c_opt, 'exact' => \$do_exact, 'server' => \$do_serv, 'u' => \$do_cpu, 'serial' => \$do_serial) or pod2usage(2);
pod2usage(1) if $help or (@ARGV < 1 and $do_list == 0);
my $arg = $ARGV[0];
$x_opt = 1 if ($do_serv);
$no_head = 1 if ($x_opt);

my $myname=`/bin/basename $0`;
chomp($myname);
dprintf(1,"myname: %s, do_ds: %d, do_net: %d, do_model: %d, x_opt: %d\n", $myname, $do_ds, $do_net, $do_model, $x_opt);
$do_vms = 1 if ($myname eq "hostinfo" && $do_ds == 0 && $do_net == 0 && $do_model == 0 && $x_opt != 0);
dprintf(1,"do_vms: %d\n", $do_vms);

my $vmdb = DBI->connect("DBI:mysql:esxadmin",'esxadmin_ro') or die "Couldn't connect to database: " . DBI->errstr;
my $sysdb = DBI->connect("DBI:mysql:sysdb",'sysdb_ro') or die "Couldn't connect to database: " . DBI->errstr;

my $last_check;
if ($do_all == 1) {
	$last_check = "(last_seen < NOW())"
} else {
	$last_check = "(UNIX_TIMESTAMP() - UNIX_TIMESTAMP(`last_seen`) < 172800)";
}

# VMs
my $vms_fields = "id,name,ci_name,farm_id,host_id";
my $vms = $vmdb->prepare("SELECT $vms_fields FROM vms WHERE id = ?");

# Farms
my $all_farms = $vmdb->prepare("SELECT name FROM farms WHERE $last_check ORDER by name");
my $farms_cmd = "SELECT id,name,server FROM farms WHERE ";
my $farms_order;
if ($do_serv == 1) {
	$farms_order = "ORDER BY last_seen DESC";
} else {
	$farms_order = "ORDER BY name";
}
my $farms_like = $vmdb->prepare($farms_cmd . " name like ? AND $last_check " . $farms_order);
my $farms_exact = $vmdb->prepare($farms_cmd . " name = ? AND $last_check " . $farms_order);
my $farms = $farms_like;
my $farms_name = $vmdb->prepare("SELECT name FROM farms WHERE id = ?");
my $farms_hosts = $vmdb->prepare("SELECT id FROM hosts WHERE farm_id = ? AND $last_check ORDER by name");
my $farms_vms_cmd = "SELECT id FROM vms WHERE farm_id = ? AND $last_check ORDER BY name";
printf("cmd: %s\n", $farms_vms_cmd);
my $farms_vms = $vmdb->prepare("SELECT id FROM vms WHERE farm_id = ? AND $last_check ORDER BY name");

# Hosts
my $all_hosts = $vmdb->prepare("SELECT name FROM hosts WHERE $last_check ORDER BY name");
my $hosts_fields = "farm_id,name,model,cpu_model,bios,version,build";
my $hosts_byid = $vmdb->prepare("SELECT $hosts_fields FROM hosts WHERE id = ?");
my $hosts_like = $vmdb->prepare("SELECT id FROM hosts WHERE name like ? AND $last_check ORDER BY name");
my $hosts_exact = $vmdb->prepare("SELECT id FROM hosts WHERE name = ? AND $last_check ORDER BY name");
my $hosts = $hosts_like;
my $hosts_vms = $vmdb->prepare("SELECT id FROM vms WHERE host_id = ? AND $last_check ORDER BY name");

my $ds = $vmdb->prepare("SELECT name, total, free FROM datastores where id in (SELECT datastore_id from host_datastore where host_id = ?)");
my $net = $vmdb->prepare("SELECT subnet FROM hosts where id = ?");
my $mod = $vmdb->prepare("SELECT model FROM hosts where id = ?");

my $ci_select = "SELECT support_tier,system_status,system_env FROM system_vw";
my $ci_like = $sysdb->prepare($ci_select . " WHERE name like ?");
my $ci_exact = $sysdb->prepare($ci_select . " WHERE name = ?");
my $ci = $ci_like;

my @fieldinfo = (
	[ "Farm", "%-20.20s" ],
	[ "Host", "%-35.35s" ],
	[ "VM", "%-25.25s" ],
	[ "SLA", "%-3.3s" ],
	[ "Status", "%-14.14s" ],
	[ "Environ", "%-12.12s" ],
	[ "Model", "%-20.20s" ],
	[ "Serial", "%-12.12s" ],
	[ "CPU", "%-60.60s" ],
	[ "Subnet", "%-20.20s" ],
	[ "Volume", "%-25.25s" ],
	[ "Total", "%-8.8s" ],
	[ "Free", "%-8.8s" ],
	[ "Util", "%-8.8s" ],
	[ "Version", "%-7.7s" ],
	[ "Build", "%-8.8s" ],
	[ "PSP", "%-3.3s" ],
	[ "Bios", "%-12.12s" ],
);

my @fields;
if ($do_vms) {
	@fields = ( "Farm", "Host", "VM", "SLA", "Status", "Environ" );
} elsif ($do_ds) {
	@fields = ( "Farm", "Host", "Volume", "Total", "Free", "Util" );
} elsif ($do_net) {
	@fields = ( "Farm", "Host", "Subnet" );
} elsif ($do_model) {
	@fields = ( "Farm", "Host", "Model", "Bios" );
} elsif ($do_serial) {
	@fields = ( "Farm", "Host", "Model", "Serial" );
} elsif ($do_cpu) {
	@fields = ( "Farm", "Host", "CPU" );
} else {
	@fields = ( "Farm", "Host", "Version", "Build", "SLA", "Status", "Environ" );
}

my $format = "";
my $header = "";
my $hline = "";
foreach my $field (@fields) {
#	printf("field: %s\n", $field);
	foreach my $info (@fieldinfo) {
#		printf("name: %s, format: %s\n", $info->[0], $info->[1]);
		if ($info->[0] eq "$field") {
			if ($c_opt) {
				$format = $format . "," if (length($format));
				$format = $format . "%s";
				$header = $header . "," if (length($header));
				$header = $header . $info->[0];
				$hline = $hline . "*bug*";
			} else {
				$format = $format . "  " if (length($format));
				$format = $format . $info->[1];
				$header = $header . sprintf($info->[1],$info->[0]) . "  ";
				$hline = $hline . sprintf($info->[1],"--------------------------------------------") . "  ";
			}
		}
	}
}
$format = $format . "\n";
#printf("format: %s", $format);
#printf("header: %s\n", $header);
#printf("hline: %s\n", $hline);

sub get_farm_name {
	my ($farm_id) = @_;

	dprintf(1,"get_farm_name: farm_id: %d\n", $farm_id);
	$farms_name->execute($farm_id);
	my ($name) = $farms_name->fetchrow_array();
	$name = "unknown" unless($name);
	dprintf(1,"get_farm_name: name: %s\n", $name);
	return $name;
}

sub get_host_name {
	my ($host_id) = @_;

	dprintf(1,"get_host_name: host_id: %d\n", $host_id);
	$hosts_byid->execute($host_id);
	my ($farm_id,$name,$model,$bios,$vers,$build) = $hosts_byid->fetchrow_array();
	$name = "unknown" unless($name);
	dprintf(1,"get_host_name: name: %s\n", $name);
	return $name;
}

# Single VM by ID
my $count = 0;
sub do_vm {
	my ($vm_id,$farm,$host,$first) = @_;

	dprintf(1,"do_vm: id: %d, farm: %s, host: %s, first: %d\n",
		$vm_id, (defined($farm) ? $farm : "undef"), (defined($host) ? $host : "undef"), $first);
	$vms->execute($vm_id);
	if ($vms->rows) {
		my ($fname,$hname);

		my ($vm_id,$vmname,$ci_name,$farm_id,$host_id) = $vms->fetchrow_array();
		if ($c_opt || $first) {
			$fname = (defined($farm) ? $farm : get_farm_name($farm_id));
			$hname = (defined($host) ? $host : get_host_name($host_id));
		} else {
			$fname = $hname = "";
		}
		dprintf(1,"vms: id: %d, name: %s, ci_name: %s, farm: %s, host: %s\n",
			$vm_id,$vmname,$ci_name,$fname,$hname);
		my $sla = "unknown";
		my $status = "unknown";
		my $env = "unknown";
		$ci_name = "" if (not $ci_name);
		if (length($ci_name)) {
#			$vmname = $ci_name;
			$ci->execute($ci_name);
		} else {
			$ci->execute($vmname . '%');
		}
		if ($ci->rows) {
			my @cidata = $ci->fetchrow;
			($sla,$status,$env) = @cidata;
		}
		if ($x_opt) {
			printf("%s\n",$vmname);
		} else {
			printf($format,$fname,$hname,$vmname,$sla,$status,$env);
		}
		$count++;
	}
}

sub do_list_hosts {
	$all_hosts->execute() or die;
	while(my @data = $all_hosts->fetchrow_array()) {
		my ($name) = @data;
		printf("%s\n",$name);
	}
	return;
}

# Single host by ID
sub do_host {
	my ($host_id,$farm) = @_;


	$hosts_byid->execute($host_id);
	while(my @data = $hosts_byid->fetchrow()) {
		my ($farm_id,$vmhost,$model,$serial,$cpu,$bios,$vers,$build) = @data;

		dprintf(1,"hosts: farm_id: %s, id: %d, name: %s, model: %s, serial: %s, cpu: %s, bios: %s, vers: %s, build: %s\n",
			$farm_id,$host_id,$vmhost,$model,$serial,$cpu,$bios,$vers,$build);

		$farm = get_farm_name($farm_id) unless($farm);
		my ($first,$fname,$hname);
		if ($do_vms) {
			$count = 0;
			$first = 1;
			$hosts_vms->execute($host_id);
			while(my @vmdata = $hosts_vms->fetchrow_array()) {
				dprintf(2,"do_host: vm_id: %s\n", $vmdata[0]);
				do_vm($vmdata[0],$farm,$vmhost,$first);
				$first = 0;
			}
		} elsif ($do_ds) {
			$ds->execute($host_id);
			if ($ds->rows) {
				$first = 1;
				while(my @dsdata = $ds->fetchrow_array()) {
					my ($dsname,$total,$free) = @dsdata;
					my $util = 100.0 - (($free/$total) * 100.0);
					my $str = sprintf("%.2f%%", $util);
					if ($c_opt || $first) {
						$fname = $farm;
						$hname = $vmhost;
						$first = 0;
					} else {
						$fname = $hname = "";
					}
					if ($x_opt) {
						printf("%s\n",$dsname);
					} else {
						printf($format,$fname,$hname,$dsname,$total,$free,$str);
					}
				}
			}
		} elsif ($do_net) {
			$net->execute($host_id);
			if ($net->rows) {
				my @netdata = $net->fetchrow_array();
				my $subnet = $netdata[0];
				if ($x_opt) {
					printf("%s\n",$subnet);
				} else {
					printf($format,$farm,$vmhost,$subnet);
				}
			}
		} elsif ($do_model) {
if (0) {
			$mod->execute($host_id);
			if ($mod->rows) {
				my @moddata = $mod->fetchrow_array();
				my $model = $moddata[0];
				if ($x_opt) {
					printf("%s\n",$model);
				} else {
					printf($format,$farm,$vmhost,$model);
				}
			}
}
			if ($x_opt) {
				printf("%s\n",$model);
			} else {
				printf($format,$farm,$vmhost,$model,$bios);
			}
		} elsif ($do_serial) {
			if ($x_opt) {
				printf("%s\n",$serial);
			} else {
				printf($format,$farm,$vmhost,$model,$serial);
			}
		} elsif ($do_cpu) {
			if ($x_opt) {
				printf("%s\n",$cpu);
			} else {
				printf($format,$farm,$vmhost,$cpu);
			}
		} else {
			my $sla = "unknown";
			my $status = "unknown";
			my $env = "unknown";
			if ($have_cmdb) {
				$ci->execute($vmhost);
				if ($ci->rows) {
					my @cidata = $ci->fetchrow;
					foreach (@cidata) {$_ = 0 unless defined};
					($sla,$status,$env) = @cidata;
				}
			}

			if ($x_opt) {
				printf("%s\n",$vmhost);
			} else {
				printf($format,$farm,$vmhost,$vers,$build,$sla,$status,$env);
			}
		}
	}
}

# Mult hosts matching name

sub do_hosts($) {
	my ($name) = @_;
	$name .= "%" if ($do_exact == 0);
	dprintf(1,"do_host: %s\n", $name);
	$hosts->execute($name);
	if (not $hosts->rows) {
		printf("hostinfo: host %s not found.\n", $name);
		exit 1;
	}
	while(my @data = $hosts->fetchrow) {
		dprintf(2,"do_farm: host_id: %s\n", $data[0]);
		do_host($data[0],undef);
	}
}

sub do_list_farms {
	$all_farms->execute() or die;
	while(my @data = $all_farms->fetchrow_array()) {
		my ($name) = @data;
		printf("%s\n",$name);
	}
	return;
}

# Mult farms matching name
sub do_farms {
	my ($name) = @_;
	$name .= "%" if ($do_exact == 0);
	dprintf(1,"name: %s\n", $name);
	$farms->execute($name);
	dprintf(2,"rows: %d\n", $farms->rows);
	if (not $farms->rows) {
		printf("farminfo: farm %s not found.\n", $name);
		exit 1;
	}
	while(my @data = $farms->fetchrow_array()) {
		my ($farm_id,$name,$server) = @data;
		dprintf(2,"farms: id: %s, name: %s, server: %s\n", $farm_id, $name, $server);
		if ($do_serv) {
			printf("%s\n",$server);
		} elsif ($do_vms) {
			$count = 0;
			my $first = 1;
			$farms_vms->execute($farm_id);
			while(my @data = $farms_vms->fetchrow_array()) {
				dprintf(2,"do_farm: vm_id: %s\n", $data[0]);
				do_vm($data[0],$name,undef,$first);
				$first = 0;
			}
		} else {
			$farms_hosts->execute($farm_id);
			while(my @data = $farms_hosts->fetchrow_array()) {
				dprintf(2,"do_farm: host_id: %s\n", $data[0]);
				do_host($data[0],$name);
			}
		}
	}
}

if ($no_head == 0 && $do_list == 0 && $c_opt == 0) {
	printf("%s\n", $header);
	printf("%s\n", $hline);
}

if ($do_exact) {
	$farms = $farms_exact;
	$hosts = $hosts_exact;
	$ci = $ci_exact;
}

########################
##
### Main
##
#######################

$arg = "" if ($do_list);
if ($arg eq "-") {
	while (<STDIN>) {
		chomp($_);
		if ($myname eq "hostinfo") {
			do_hosts $_;
		} else {
			do_farms $_;
		}
	}
} elsif (substr($arg,0,1) eq "@") {
	my $file=substr($arg,1,99);
        open(INPUT, $file) or die("couldnt open " . $file);
        while (<INPUT>) {
                chomp($_);
		if ($myname eq "hostinfo") {
			do_hosts $_;
		} else {
			do_farms $_;
		}
	}
        close(INPUT);
} else {
	if ($myname eq "hostinfo") {
		if ($do_list) {
			do_list_hosts;
		} else {
			do_hosts $arg;
		}
	} else {
		if ($do_list) {
			do_list_farms;
		} else {
			do_farms $arg;
		}
	}
}

if ($no_head == 0 && $do_vms != 0 && $c_opt == 0) {
	printf("%s\n", $hline);
	printf("Number of VMs: %d\n", $count);
}

exit 0;

 __END__
 
=head1 NAME

sample - Using GetOpt::Long and Pod::Usage

=head1 SYNOPSIS

[farm|host]info [options] [file ...]

Options:
	-help            brief help message

=head1 OPTIONS 

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something useful with the contents thereof.  

=cut
